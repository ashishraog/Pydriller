A Commit object has all the information of a Git commit, and much more. More speci?cally: 

• hash (str): hash of the commit 
• msg (str): commit message 
• author (Developer): commit author (name, email) 
• author_date (datetime): authored date 
• author_timezone (int): author timezone (expressed in seconds from epoch) 
• committer (Developer): commit committer (name, email) 
• committer_date (datetime): commit date 
• committer_timezone (int): commit timezone (expressed in seconds from epoch) 
• branches (List[str]): List of branches that contain this commit 
• in_main_branch (Bool): True if the commit is in the main branch 
• merge (Bool): True if the commit is a merge commit 
• modi?cations (List[Modi?cations]): list of modi?ed ?les in the commit (see Modi?cations) 
• parents (Set[str]): list of the commit parents 
• project_name (str): project name 
• project_path (str): project path

Example:-
	for commit in RepositoryMining('path/to/the/repo').traverse_commits(): 
		print( 
			'The commit {} has been modified by {}, ' 
			'committed by {} in date {}'.format(
				commit.hash,
				commit.author.name,	
				commit.committer.name, 
				commit.committer_date
				)
			)



You can get the list of modi?ed ?les, as well as their diffs and current source code. 
To that, all you have to do is to get the list of Modi?cations that exists inside Commit. 
A modi?cation object has the following ?elds: 

• old_path: old path of the ?le (can be _None_ if the ?le is added) 
• new_path: new path of the ?le (can be _None_ if the ?le is deleted) 
• change_type: type of the change: can be Added, Deleted, Modi?ed, or Renamed. 
• diff: diff of the ?le as Git presents it (e.g., starting with @@ xx,xx @@). 
• source_code: source code of the ?le (can be _None_ if the ?le is deleted) 
• source_code_before: source code of the ?le before the change (can be _None_ if the ?le is added) 
• added: number of lines added 
• removed: number of lines removed 
• nloc: Lines Of Code (LOC) of the ?le 
• complexity: Cyclomatic Complexity of the ?le 
• token_count: Number of Tokens of the ?le 
• methods: list of methods of the ?le. The list might be empty if the programming language is not supported or if the ?le is not a source code ?le

Example:-
	for commit in RepositoryMining('path/to/the/repo').traverse_commits(): 
		for m in commit.modifications: 
			print( 
				"Author {}".format(commit.author.name), 
				" modified {}".format(m.filename), 
				" with a change type of {}".format(m.change_type.name), 
				" and the complexity is {}".format(m.complexity) 
			)


